---
title: "R Notebook"
output:
  html_document:
    keep_md: yes
    self_contained: no
---
This is an exploration of the John Hopkins data.

```{r}
library(readr)
library(data.table)
library(ggplot2)
library(plotly)
library(directlabels)
library(dplyr)
```



```{r}

confirmed_cases<-data.table(read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"))
```

Let's get cases by country, to make this a bit easier.

```{r}
confirmed_cases<-confirmed_cases[,1:(ncol(confirmed_cases)-1)]
transform_cols<-colnames(confirmed_cases)[5:ncol(confirmed_cases)]
id_vars <- c("Country/Region","Province/State","Lat","Long")


confirmed_cases_long <- melt(confirmed_cases,
                             id.vars=id_vars,
                             measure.vars = transform_cols,
                             variable.name = "case_date",
                             value.name = "Confirmed Cases"
                             )

confirmed_cases_long_bycountry <- confirmed_cases_long[,.(`Confirmed Cases`=sum(`Confirmed Cases`)),by=.(`Country/Region`,case_date)]
```

```{r}
confirmed_cases_long_bycountry$case_date<-as.Date(confirmed_cases_long_bycountry$case_date,format="%m/%d/%y")
ggplot(confirmed_cases_long_bycountry[`Country/Region` %in% c("New Zealand","Australia","Canada")],
       aes(x=case_date,y=`Confirmed Cases`,group=`Country/Region`,color=`Country/Region`))+
  geom_line() + 
  scale_x_date(limits=c(min(confirmed_cases_long_bycountry$case_date),max(confirmed_cases_long_bycountry$case_date)+8))+
  geom_dl(aes(label=`Country/Region`),method=list("last.qp",cex=1))
```


```{r}
threshold<-4
#mark which days have reached the threshold
confirmed_cases_long_bycountry[,IsAtOrPastThreshold:=(`Confirmed Cases`>=threshold)]

#identify the first day for each country that has reached the threshold
confirmed_cases_long_bycountry[,
                               DatePastThreshold:=min(.SD[IsAtOrPastThreshold==TRUE,case_date]),
                               by=`Country/Region`]

#then calculate the case_date relative to the threshold
confirmed_cases_long_bycountry[,DaysPastThreshold:=as.integer(case_date-DatePastThreshold)]


confirmed_cases_long_bycountry$case_date<-as.Date(confirmed_cases_long_bycountry$case_date,format="%m/%d/%y")

     #make it easy to see the US & UK
     confirmed_cases_long_bycountry[`Country/Region`=="US",
                                    `Country/Region`:="United States",
                                    ]
     confirmed_cases_long_bycountry[`Country/Region`=="UK",
                                    `Country/Region`:="United Kingdom",
                                    ]
```


```{r}

    threshold<-50
     
     #mark which days have reached the threshold
     confirmed_cases_long_bycountry[,IsAtOrPastThreshold:=(`Confirmed Cases`>=threshold)]
     
     #identify the first day for each country that has reached the threshold
     confirmed_cases_long_bycountry[,
                                    DatePastThreshold:=min(.SD[IsAtOrPastThreshold==TRUE,case_date]),
                                    by=`Country/Region`]
     
     #then calculate the date relative to the threshold
     confirmed_cases_long_bycountry[,DaysPastThreshold:=as.integer(case_date-DatePastThreshold)]
     
      confirmed_graph<-confirmed_cases_long_bycountry
     #Remove China if it was above the threshold on the first day. we don't do this to any other countries
     #but China is further along than all others.
     if(threshold<min(confirmed_graph[`Country/Region`=="China",`Confirmed Cases`])){
       confirmed_graph <- 
         confirmed_graph[`Country/Region`!="China"]
     }

     
     
     case_limit<-40
     days_limit <- 21

     #now we want a list of the lines
     #with an x axis point either at the end of the graph,
     #or at the end of the line, whichever is first,     
     country_labels<-confirmed_graph[,
                                    .(intercept_day=min(days_limit,max(DaysPastThreshold))),
                                    by=`Country/Region`] %>% .[!is.na(intercept_day)] %>%
       #and then at that x-axis point, we want the y-axis point.  
       merge(confirmed_graph[,.(`Country/Region`,DaysPastThreshold,`Confirmed Cases`,DatePastThreshold)],
                           by.x=c("Country/Region","intercept_day"),
                           by.y=c("Country/Region","DaysPastThreshold"),
             all.x=TRUE,all.y=FALSE)
 
     x_breaks  <- seq(-7,days_limit,7)
     x_labels <- c(paste(abs(x_breaks[1]),"Days Before"),
                   x_breaks[2:(length(x_breaks)-1)],
                   paste(x_breaks[length(x_breaks)],"Days After"))
     myplot<-ggplot(confirmed_graph
            # [`Country/Region` %in%
            #                                  c("New Zealand","Australia",
            #                                    "Canada","Denmark","Singapore",
            #                                    "Hong Kong","US")]
            ,
            aes(x=DaysPastThreshold,y=`Confirmed Cases`,
                group=`Country/Region`,color=DatePastThreshold))+
       geom_line(size=1,alpha=0.3)+
       #geom_point(alpha=0.5)+
       scale_x_continuous(limits=c(-7,days_limit),
                          breaks=x_breaks,
                          labels = x_labels)+
       coord_cartesian(xlim=c(-7,days_limit+3))+
       scale_y_continuous(trans = "log10",
                          breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000,10000,20000,50000,100000),
                          minor_breaks=NULL,
                          labels = scales::comma,
                          sec.axis = dup_axis())+
       geom_vline(xintercept = 0,linetype="dashed")+
       #geom_hline(yintercept = threshold,,linetype="dashed")+
       labs(title=paste0("Growth in cases by day from the ",threshold," case mark, by country"),
            x=paste0("Days past first day with ",threshold," cases"),
            y="Total confirmed cases",
            color="Date Country Reached Threshold")+
       theme(legend.position = "none")+
       geom_text(data=country_labels,
                 aes(x=intercept_day,y=`Confirmed Cases`,label=`Country/Region`),
                 hjust=0,size=2,fontface="bold")

  
  myplot
```


Can we plot the number of new cases by day?


```{r}
confirmed_cases_long_bycountry[order(case_date),
                               `New Cases`:=(`Confirmed Cases`-shift(`Confirmed Cases`)),
                               `Country/Region`]
  
#moving average over 7 days; figure is dated on the last day of the average window.
confirmed_cases_long_bycountry[order(case_date),
                               NewCasesMA:=shift(zoo::rollapply(`New Cases`,7,mean),6),
                               `Country/Region`]

new_cases<-confirmed_cases_long_bycountry[!is.na(NewCasesMA)]

if(threshold<min(new_cases[`Country/Region`=="Mainland China",`Confirmed Cases`])){
       new_cases <- 
         new_cases[`Country/Region`!="Mainland China"]
     }

case_limit<-40
days_limit <- 21

#now we want a list of the lines
#with an x axis point either at the end of the graph,
#or at the end of the line, whichever is first,     
country_labels<-new_cases[,
                              .(intercept_day=min(days_limit,max(DaysPastThreshold))),
                              by=`Country/Region`] %>% .[!is.na(intercept_day)] %>%
 #and then at that x-axis point, we want the y-axis point.  
 merge(new_cases[,.(`Country/Region`,DaysPastThreshold,NewCasesMA,DatePastThreshold)],
                     by.x=c("Country/Region","intercept_day"),
                     by.y=c("Country/Region","DaysPastThreshold"),
       all.x=TRUE,all.y=FALSE)

x_breaks  <- seq(-7,days_limit,7)
x_labels <- c(paste(abs(x_breaks[1]),"Days Before"),
             x_breaks[2:(length(x_breaks)-1)],
             paste(x_breaks[length(x_breaks)],"Days After"))
myplot<-ggplot(new_cases
      ,
      aes(x=DaysPastThreshold,y=NewCasesMA,
          group=`Country/Region`,color=DatePastThreshold))+
 geom_line(size=1,alpha=0.3)+
 #geom_point(alpha=0.5)+
 scale_x_continuous(limits=c(-7,days_limit),
                    breaks=x_breaks,
                    labels = x_labels,
                    minor_breaks=NULL)+
 coord_cartesian(xlim=c(-7,days_limit+3),ylim=c(1,max(new_cases$NewCasesMA)))+
 scale_y_continuous(trans = "log10",
                    breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000,10000,20000,50000,100000),
                    minor_breaks=NULL,
                    labels = scales::comma,
                    sec.axis = dup_axis())+
 geom_vline(xintercept = 0,linetype="dashed")+
 #geom_hline(yintercept = threshold,,linetype="dashed")+
 labs(title=paste0("Growth in new cases by day from the ",threshold," case mark, by country"),
      x=paste0("Days past first day with ",threshold," cases"),
      y="New Cases (7 day rolling average)",
      color="Date Country Reached Threshold")+
 theme(legend.position = "none")+
 geom_text(data=country_labels,
           aes(x=intercept_day,y=NewCasesMA,label=`Country/Region`),
           hjust=0,size=2,fontface="bold")

  
  myplot
```


```{r}
confirmed_cases_long_bycountry[order(case_date),
                               `New Cases`:=(`Confirmed Cases`-shift(`Confirmed Cases`)),
                               `Country/Region`]
  
#moving average over 7 days; figure is dated on the last day of the average window.
confirmed_cases_long_bycountry[order(case_date),
                               #NewCasesMA:=shift(zoo::rollapply(`New Cases`,7,mean),0),
                               NewCasesMA_c:=zoo::rollapply(`New Cases`,7,mean),
                               `Country/Region`]

confirmed_cases_long_bycountry[order(case_date),
                               #NewCasesMA:=shift(zoo::rollapply(`New Cases`,7,mean),0),
                               NewCasesMA:=shift(NewCasesMA_c,6),
                               `Country/Region`]

#View(confirmed_cases_long_bycountry[`Country/Region`=="New Zealand"])
```


```{r}

new_cases<-confirmed_cases_long_bycountry[!is.na(NewCasesMA)]

# if(threshold<min(new_cases[`Country/Region`=="Mainland China",`Confirmed Cases`])){
#        new_cases <-
#          new_cases[`Country/Region`!="Mainland China"]
#      }

case_limit<-40
days_limit <- 21

#now we want a list of the lines
#with an x axis point either at the end of the graph,
#or at the end of the line, whichever is first,     
country_labels<-new_cases[,
                              .(intercept_date=max(case_date)),
                              by=`Country/Region`] %>% 
 merge(new_cases[,.(`Country/Region`,case_date,NewCasesMA)],
                     by.x=c("Country/Region","intercept_date"),
                     by.y=c("Country/Region","case_date"),
       all.x=TRUE,all.y=FALSE)

country_labels[,NewCasesGroup:=round(log(NewCasesMA,10),1)]
country_labels_grouped<- country_labels[,
                                        .(Countries=paste0(`Country/Region`, collapse=", "),
                                          GroupedNewCases=mean(NewCasesMA),
                                          `Country/Region` = .SD[`Country/Region`][[1]]
                                          )
                                        ,by=.(NewCasesGroup,intercept_date)] %>% .[GroupedNewCases>2]
x_breaks  <- seq(min(new_cases$case_date),max(new_cases$case_date),7)



myplot<-ggplot(new_cases
      ,
      aes(x=as.Date(case_date),y=NewCasesMA,
          group=`Country/Region`))+
 geom_line(size=1,alpha=0.3)+
  theme_classic()+
 #geom_point(alpha=0.5)+
 scale_x_date(#breaks=x_breaks,
   date_breaks = "7 days",
                    minor_breaks=NULL,date_labels="%b %d")+
 coord_cartesian(xlim=c(min(new_cases$case_date),max(new_cases$case_date)+7),
                 ylim=c(10,max(new_cases$NewCasesMA)))+
 scale_y_continuous(trans = "log10",
                    breaks = c(2,5,10,20,50,100,200,500,1000,2000,5000,10000,20000,50000,100000),
                    minor_breaks=NULL,
                    labels = scales::comma,
                    sec.axis = dup_axis())+
 #geom_vline(xintercept = 0,linetype="dashed")+
 #geom_hline(yintercept = threshold,,linetype="dashed")+
 labs(title=paste0("New confirmed cases by day and country"),
      x=paste0("Date"),
      y="New Cases (7 day rolling average)",
      color="Date Country Reached Threshold",
      caption="Source: John Hopkins Dataset")+
 theme(legend.position = "none")+
 geom_text(data=country_labels_grouped,
           aes(x=intercept_date,y=GroupedNewCases,label=Countries),
           hjust=0,size=2,fontface="bold")


htmlwidgets::saveWidget(as_widget(ggplotly(myplot)),"new_cases.html",selfcontained=FALSE)
  
myplot
```
```{r}

new_cases<-confirmed_cases_long_bycountry[!is.na(NewCasesMA)]

# if(threshold<min(new_cases[`Country/Region`=="Mainland China",`Confirmed Cases`])){
#        new_cases <-
#          new_cases[`Country/Region`!="Mainland China"]
#      }

case_limit<-40
days_limit <- 21

#now we want a list of the lines
#with an x axis point either at the end of the graph,
#or at the end of the line, whichever is first,     
country_labels<-new_cases[,
                              .(intercept_date=max(case_date)),
                              by=`Country/Region`] %>% 
 merge(new_cases[,.(`Country/Region`,case_date,NewCasesMA)],
                     by.x=c("Country/Region","intercept_date"),
                     by.y=c("Country/Region","case_date"),
       all.x=TRUE,all.y=FALSE)

country_labels[,NewCasesGroup:=round(log(NewCasesMA,10),2)]
country_labels_grouped<- country_labels[,
                                        .(Countries=paste0(`Country/Region`, collapse=", "),
                                          GroupedNewCases=mean(NewCasesMA),
                                          `Country/Region` = .SD[`Country/Region`][[1]]
                                          )
                                        ,by=.(NewCasesGroup,intercept_date)] %>% .[GroupedNewCases>2]
x_breaks  <- seq(min(new_cases$case_date),max(new_cases$case_date),7)



myplot<-ggplot(new_cases
      ,
      aes(x=as.Date(case_date),y=NewCasesMA,color=`Country/Region`,
          group=`Country/Region`))+
 geom_line(size=1,alpha=0.5)+
  theme_classic()+
 #geom_point(alpha=0.5)+
 scale_x_date(#breaks=x_breaks,
   date_breaks = "7 days",
                    minor_breaks=NULL,date_labels="%b %d")+
 coord_cartesian(xlim=c(max(new_cases$case_date)-21,max(new_cases$case_date)+3),
                 ylim=c(20,max(new_cases$NewCasesMA)))+
 scale_y_continuous(trans = "log10",
                    breaks = c(2,5,10,20,50,100,200,500,1000,2000,5000,10000,20000,50000,100000),
                    minor_breaks=NULL,
                    labels = scales::comma,
                    sec.axis = dup_axis())+
 #geom_vline(xintercept = 0,linetype="dashed")+
 #geom_hline(yintercept = threshold,,linetype="dashed")+
 labs(title=paste0("New confirmed cases by day and country"),
      x=paste0("Date"),
      y="New Cases (7 day rolling average)",
      color="Date Country Reached Threshold",
      caption="Source: John Hopkins Dataset")+
 theme(legend.position = "none")+
 geom_text(data=country_labels_grouped[!(Countries %in% c("Switzerland","Norway"))],
           aes(x=intercept_date,y=GroupedNewCases,label=Countries),
           hjust=0,size=2,fontface="bold")


htmlwidgets::saveWidget(as_widget(ggplotly(myplot)),"new_cases.html",selfcontained=FALSE)
  
myplot
```



Next point should be measuring proportion growth in new cases, over this 7 day period.


```{r}
#now let's model the exponential and linear trend.
#maybe just the last 3 weeks?
days_to_subtract<-21
date_to_start<-max(new_cases$case_date)-days_to_subtract
new_cases[`New Cases`<0,`New Cases`:=0]
prediction_tables<-lapply(unique(new_cases$`Country/Region`),function(cname){
  #print(cname)
  # linear_model <- lm(new_cases[`Country/Region`==cname & case_date>=date_to_start,
  #           .(`New Cases`,Day=1:.N)],
  #    formula = `New Cases`~Day)
  
  exponential_model <- glm(new_cases[`Country/Region`==cname & case_date>=date_to_start,
            .(`New Cases`,Day=1:.N)],
            formula = `New Cases`~I(Day^2)+Day,
            family=poisson(link = "log")
            )
  
  # if(AIC(exponential_model)<AIC(linear_model)){
    predict_model<-exponential_model
  #   #print("using exp model")
  # }else{
  #   predict_model<-linear_model
  #   #print("using linear model")
  # }
  predict_tb<-data.table("Day"=days_to_subtract+0:21-1,
                       "Country/Region"=cname)
  predict_tb[,case_date:=date_to_start+Day+2]
  predict_tb[["CasePrediction"]]<- predict(predict_model,predict_tb,type="response")
  return(predict_tb)

})

prediction_table<-rbindlist(prediction_tables)
new_cases$CaseDataType<-"Actual"

prediction_table$CaseDataType<-"Prediction"

cc_graph<-rbind(new_cases[,.(CaseData=NewCasesMA,
                             ConfirmedCases=as.numeric(`Confirmed Cases`),
                       case_date,
                       `Country/Region`,
                       CaseDataType="Actual"
                       )],
                prediction_table[,.(CaseData=CasePrediction,
                                    ConfirmedCases=NA,
                                    case_date,
                                    `Country/Region`,
                                    CaseDataType="Prediction")]
)


last_confirmed_cases <- cc_graph[CaseDataType=="Actual",.(LastConfirmedCases=.SD[.N,ConfirmedCases]),`Country/Region`]
cc_graph<-merge(cc_graph,last_confirmed_cases)
cc_graph[CaseDataType=="Prediction",ConfirmedCases:=LastConfirmedCases+cumsum(CaseData),`Country/Region`]
cc_graph$LastConfirmedCases<-NULL
# cc_graph <-
#   cc_graph %>%
#   group_by(`Country/Region`) %>% 
#   mutate(NCMAModeled=cumsum(ifelse(row_number()==1,NewCasesMA,DeltaCaseData))) %>%
#   data.table


```


```{r}
select_countries<-c("France","Italy","Germany","Australia","United States","Republic of Korea")
country_labels_grouped$CaseDataType<-"Actual"
myplot<-ggplot(cc_graph[`Country/Region` %in% select_countries],
      aes(x=as.Date(case_date),y=CaseData,linetype=CaseDataType,color=`Country/Region`,
          group=interaction(`Country/Region`,CaseDataType)))+
 geom_line(size=1,alpha=0.3)+
  theme_classic()+
 #geom_point(alpha=0.5)+
 scale_x_date(#breaks=x_breaks,
   date_breaks = "7 days",
                    minor_breaks=NULL,date_labels="%b %d")+
 coord_cartesian(xlim=c(min(cc_graph$case_date),max(cc_graph$case_date)),
                 ylim=c(2,max(new_cases$NewCasesMA)))+
 scale_y_continuous(trans = "log10",
                    breaks = c(2,5,10,20,50,100,200,500,1000,2000,5000,10000,20000,50000,100000),
                    minor_breaks=NULL,
                    labels = scales::comma,
                    sec.axis = dup_axis())+
 #geom_vline(xintercept = 0,linetype="dashed")+
 #geom_hline(yintercept = threshold,,linetype="dashed")+
 labs(title=paste0("New confirmed cases and predictions by day and country"),
      x=paste0("Date"),
      y="New Cases (7 day rolling average)",
      color="Date Country Reached Threshold",
      caption="Source: John Hopkins Dataset")+
 theme(legend.position = "none")+
 geom_text(data=country_labels_grouped[`Country/Region` %in% select_countries],
           aes(x=intercept_date,y=GroupedNewCases,label=Countries),
           hjust=0,size=2,fontface="bold")


#htmlwidgets::saveWidget(as_widget(ggplotly(myplot)),"new_cases_prediction.html",selfcontained=FALSE)
  
myplot
```

```{r}

country_labels_grouped$CaseDataType<-"Actual"

```


#Predicting actual numbers

The straightforward thing to do would be to predict cases from current new rates, assuming constant new rates, or assuming the model. That would at least look a bit less ridiculous.


```{r}

select_countries<-c("France","Italy","Germany","Australia","United States","Korea, South","Spain","United Kingdom",
                    "Netherlands","Sweden","Denmark","Singapore","Taiwan*")
cc_graph_filtered<-cc_graph[ConfirmedCases<10^9 & `Country/Region` %in% select_countries &
                              case_date<Sys.Date()+7]

country_labels<-cc_graph_filtered[`Country/Region` %in% select_countries ,
                              .(intercept_date=max(case_date)),
                              by=`Country/Region`] %>% 
 merge(cc_graph_filtered[,.(`Country/Region`,case_date,ConfirmedCases)],
                     by.x=c("Country/Region","intercept_date"),
                     by.y=c("Country/Region","case_date"),
       all.x=TRUE,all.y=FALSE)

country_labels[,CasesGroup:=round(log(ConfirmedCases,10),1)]
country_labels_grouped<- country_labels[,
                                        .(Countries=paste0(`Country/Region`, collapse=", "),
                                          GroupedCC=mean(ConfirmedCases),
                                          `Country/Region` = .SD[`Country/Region`][[1]]
                                          )
                                        ,by=.(CasesGroup,intercept_date)] %>% .[GroupedCC>2]
#x_breaks  <- seq(min(new_cases$case_date),max(new_cases$case_date),7)





country_labels_grouped$CaseDataType<-"Actual"
#cut off values greater than 1 billion as implausible
#numbers below that are implausible too but we have to do this to avoid a ggplot error bug

myplot<-ggplot(cc_graph_filtered,
      aes(x=as.Date(case_date),y=ConfirmedCases,linetype=CaseDataType,
          group=interaction(`Country/Region`,CaseDataType)))+
 geom_line(size=1,alpha=0.3)+
  theme_classic()+
 #geom_point(alpha=0.5)+
 scale_x_date(#limits = c(min(cc_graph$case_date),max(Sys.Date()+7)),#breaks=x_breaks,
   date_breaks = "7 days",
                    minor_breaks=NULL,date_labels="%b %d")+
 coord_cartesian(xlim=c(min(cc_graph$case_date),max(cc_graph$case_date)),
                 ylim=c(20,max(cc_graph_filtered$ConfirmedCases)))+
 scale_y_continuous(trans = "log10",
                    breaks = rep(c(2,5,10),8)*rep(10^seq(1,8-1,1),each=3),
                    minor_breaks=NULL,
                    labels = scales::comma)+#,
                    #sec.axis = dup_axis())+
 #geom_vline(xintercept = 0,linetype="dashed")+
 #geom_hline(yintercept = threshold,,linetype="dashed")+
 labs(title=paste0("Confirmed cases and predictions by day and country"),
      x=paste0("Date"),
      y="Confirmed cases and predictions",
      color="Date Country Reached Threshold",
      caption="Source: John Hopkins Dataset")+
 theme(legend.position = "none")+
 geom_text(data=country_labels_grouped[`Country/Region` %in% select_countries],
           aes(x=intercept_date,y=GroupedCC,label=Countries),
           hjust=0,size=2,fontface="bold")


#htmlwidgets::saveWidget(as_widget(ggplotly(myplot)),"new_cases_prediction.html",selfcontained=FALSE)
  
myplot
```